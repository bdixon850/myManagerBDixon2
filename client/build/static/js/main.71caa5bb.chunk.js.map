{"version":3,"sources":["components/AppNavbar.js","components/Login.js","components/Form.tsx","components/Payment.tsx","components/Profile.js","components/Contractor.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleNavbar","bind","assertThisInitialized","state","collapsed","setState","react_default","a","createElement","Navbar","color","dark","expand","className","NavbarBrand","href","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","NavLink","React","Component","Login","es_Form","inline","FormGroup","Label","for","Input","type","name","id","placeholder","Button","Form","handleSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","_ref2","token","wrap","_context","prev","next","preventDefault","stripe","createToken","sent","console","log","t0","stop","_x","apply","arguments","amount","_this2","react","onSubmit","value","onChange","target","es","injectStripe","Payment","apiKey","components_Form","Profile","items","uuid","FormText","tag","check","style","marginBotttom","prompt","concat","toConsumableArray","Contractor","contractors","handleOfferClick","handleScheduleClick","$","on","event","recipient","relatedTarget","data","modal","find","text","val","window","location","alert","map","contractor","key","src","image","alt","Name","Occupation","Price","data-toggle","data-target","tabIndex","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","htmlFor","handleSendEmail","App","react_router_dom","components_AppNavbar","react_router","exact","path","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71caa5bb.chunk.js","sourcesContent":["import React from 'react';\n\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n\n} from 'reactstrap';\n\n\nclass AppNavbar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.toggleNavbar = this.toggleNavbar.bind(this);\n        this.state = {\n            collapsed: true\n        };\n    }\n\n    toggleNavbar() {\n        this.setState({\n            collapsed: !this.state.collapsed\n        });\n    }\n    render() {\n        return (\n            <div>\n                <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\n                    <NavbarBrand href=\"/\" className=\"mr-auto\">myManager</NavbarBrand>\n                    <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n                    <Collapse isOpen={!this.state.collapsed} navbar>\n                        <Nav navbar>\n                            <NavItem>\n                                <NavLink href=\"/\">Login</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink href=\"/profile\">Profile</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink href=\"/contractor\">Contractor</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink href=\"/payment\">Payment</NavLink>\n                            </NavItem>\n                            <NavItem>\n                                <NavLink href=\"https://github.com/reactstrap/reactstrap\">GitHub</NavLink>\n                            </NavItem>\n                        </Nav>\n                    </Collapse>\n                </Navbar>\n            </div>\n        );\n    }\n}\n\n\nexport default AppNavbar;","import React from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nclass Login extends React.Component {\n    render() {\n        return (\n            <Form inline>\n                <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n                    <Label for=\"exampleEmail\" className=\"mr-sm-2\">Email</Label>\n                    <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"user@jesusmail.com\" />\n                </FormGroup>\n                <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n                    <Label for=\"examplePassword\" className=\"mr-sm-2\">Password</Label>\n                    <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"don't tell!\" />\n                </FormGroup>\n\n                <Button color=\"primary\">SignIn</Button>\n\n                <Button color=\"warning\">SignUp</Button>\n            </Form>\n        );\n    }\n}\nexport default Login;","import * as React from 'react';\nimport { CardElement, injectStripe, ReactStripeElements } from 'react-stripe-elements';\n\n\nclass Form extends React.Component<IFormProps, IFormState> {\n\n    constructor(props: IFormProps) {\n        super(props);\n        this.state = {\n            name: \"\", \n            amount: \"\"\n        };\n    }\n\n    handleSubmit = async (e: React.ChangeEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        try {\n            let { token } = await this.props.stripe.createToken({ name: this.state.name });\n            console.log(token)\n            // let amount = this.state.amount;\n            // await fetch('/api/donate', {\n            //     method: 'POST', \n            //     headers: {\n            //         'Content-type': 'application/json'\n            //     },\n            //     body: JSON.stringify({ token, amount })\n            // })\n              //redirect, clear input, thank  you message  \n        } catch(e) {\n            throw e;\n        }\n    }\n\n\n    render() {\n        return (\n            <main className=\"container\">\n            <h1>Please enter payment information below</h1>\n                <form \n                    className=\"form-group mt-3 border border-primary rounded shadow-lg p-3\"\n                    onSubmit={this.handleSubmit}\n                >\n                    <label>Name</label>\n                    <input \n                        type=\"text\"\n                        className=\"input-group my-1 p-1 border border-dark\"\n                        value={this.state.name}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => this.setState({ name: e.target.value })}\n                    />\n                    <label>Amount</label>\n                    <input \n                        type=\"text\"\n                        className=\"input-group my-1 p-1 border border-dark\"\n                        value={this.state.amount}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => this.setState({ amount: e.target.value })}\n                    />\n                    <label>CC Number -- Exp. Date - CVC</label>\n                    <CardElement className=\"p-2 border border-dark\" />\n                    <button className=\"btn btn-primary border border-dark shadow mt-3\">Charge</button>\n                </form>\n            </main>\n        );\n    }\n}\n\ninterface IFormProps extends ReactStripeElements.InjectedStripeProps { }\n\ninterface IFormState { \n    name: string;\n    amount: string;\n}\n\nexport default injectStripe(Form);\n","import * as React from 'react';\nimport { StripeProvider, Elements } from 'react-stripe-elements';\nimport Form from './Form';\n\n\nclass Payment extends React.Component<IAppProps, IAppState> {\n    render() {\n        return (\n            <>\n            <StripeProvider apiKey=\"pk_test_1Og57fuosuAAWBAbB9qML1sb00cVOsVoCM\">\n                <Elements>\n                    <Form />\n                </Elements>\n            </StripeProvider>\n            </>\n        );\n    }\n}\n\ninterface IAppProps { }\n\ninterface IAppState { }\nexport default Payment;","import uuid from 'uuid';\n\nimport React from 'react';\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\nclass Profile extends React.Component {\n    state = {\n        items: [\n            { id: uuid(), name: 'Name' },\n            { id: uuid(), name: 'Occupation' },\n            { id: uuid(), name: 'Years Experience' },\n            { id: uuid(), name: 'Price' }\n        ]\n    }\n    render() {\n        return (\n            <Form>\n                <FormGroup>\n                    <Label for=\"exampleEmail\">Email</Label>\n                    <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"with a placeholder\" />\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"examplePassword\">Password</Label>\n                    <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"password placeholder\" />\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"exampleText\">Text Area</Label>\n                    <Input type=\"textarea\" name=\"text\" id=\"exampleText\" placeholder=\"Include any details for Contract\" />\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"exampleFile\">File</Label>\n                    <Input type=\"file\" name=\"file\" id=\"exampleFile\" />\n                    <FormText color=\"muted\">\n                        Upload 10-99\n\n                    </FormText>\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"exampleFile\">File</Label>\n                    <Input type=\"file\" name=\"file\" id=\"exampleFile\" />\n                    <FormText color=\"muted\">\n                        Upload Invoice\n\n                    </FormText>\n                </FormGroup>\n                <FormGroup>\n                    <Label for=\"exampleFile\">File</Label>\n                    <Input type=\"file\" name=\"file\" id=\"exampleFile\" />\n                    <FormText color=\"muted\">\n                        Upload Rider/Contract Details\n\n                    </FormText>\n                </FormGroup>\n                <FormGroup tag=\"fieldset\">\n                    <legend>Make An Offer Option</legend>\n                    <FormGroup check>\n                        <Label check>\n                            <Input type=\"radio\" name=\"radio1\" />{' '}\n                            Select If You Want a \"Make An Offer\" Option\n            </Label>\n                    </FormGroup>\n\n                </FormGroup>\n\n\n                <Button color=\"primary\"\n                    style={{ marginBotttom: '2rem' }}\n                    onClick={() => {\n                        const name = prompt('Enter Item');\n                        if (name) {\n                            this.setState(state => ({\n                                items: [...state.items, { id: uuid(), name }]\n                            }));\n                        }\n                    }}>Submit</Button>\n            </Form>\n        );\n    }\n}\n\nexport default Profile;","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport  'bootstrap/dist/css/bootstrap.css';\nimport contractors from '../contractors.json';\n\nclass Contractor extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            contractors\n        }\n        this.handleOfferClick = this.handleOfferClick.bind(this);\n        this.handleScheduleClick = this.handleScheduleClick.bind(this)\n    }\n\n    handleOfferClick(e) {\n        e.preventDefault();\n        $('#exampleModal').on('show.bs.modal', function (event) {\n            var button = $(event.relatedTarget) // Button that triggered the modal\n            var recipient = button.data('whatever') // Extract info from data-* attributes\n            // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).\n            // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.\n            var modal = $(this)\n            modal.find('.modal-title').text('New message to ' + recipient)\n            modal.find('.modal-body input').val(recipient)\n        })\n    }\n\n    handleScheduleClick(e) {\n        e.preventDefault();\n        window.location.href = '/payment'\n    }\n\n    handleSendEmail(e) {\n        e.preventDefault();\n\n        alert('Thanks, your message has been sent. You will be notified once the contractor responds')\n    }\n    \n    render() {\n        return (\n            <div>\n                {this.state.contractors.map(contractor => (\n                    <div className=\"card\" key={contractor.id} id={contractor.id}>\n                        <img src={contractor.image} className=\"card-img-top\" alt={contractor.Name}></img>\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">{contractor.Occupation}</h5>\n                                <p className=\"card-text\">The Price per hour to book this consultant is: {contractor.Price}</p>\n                            </div>\n                            <div className=\"card-body\">\n                                <button type=\"submit\" className=\"btn btn-success\" onClick={this.handleScheduleClick}>Book/Schedule</button>\n                                <button type=\"submit\" className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModal\" onClick={this.handleOfferClick}>Make Offer</button>\n                                {/* <a href=\"#\" className=\"card-link\">Book/Schedule</a> */}\n                                {/* <a href=\"#\" className=\"card-link\">Make Offer</a> */}\n                            </div>\n\n                            <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                <div className=\"modal-dialog\" role=\"document\">\n                                    <div className=\"modal-content\">\n                                        <div className=\"modal-header\">\n                                            <h5 className=\"modal-title\" id=\"exampleModalLabel\">Make an offer</h5>\n                                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                                <span aria-hidden=\"true\">&times;</span>\n                                            </button>\n                                        </div>\n                                        <div className=\"modal-body\">\n                                            <form>\n                                                <div className=\"form-group\">\n                                                    <label htmlFor=\"recipient-name\" className=\"col-form-label\">Personal Message:</label>\n                                                    <input type=\"text\" className=\"form-control\" id=\"recipient-name\"></input>\n                                                </div>\n                                                <div className=\"form-group\">\n                                                    <label htmlFor=\"message-text\" className=\"col-form-label\">Offer Price:</label>\n                                                    <textarea className=\"form-control\" id=\"message-text\"></textarea>\n                                                </div>\n                                            </form>\n                                        </div>\n                                        <div className=\"modal-footer\">\n                                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                                            <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\" onClick={this.handleSendEmail}>Send message</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                    </div>\n                ))};\n            </div>\n        );\n    }\n}\n//     return (\n//         <div>\n//             <div className=\"card\">\n//                 <img src={props.image} className=\"card-img-top\" alt={props.Name}></img>\n//                 <div className=\"card-body\">\n//                     <h5 className=\"card-title\">{props.Occupation}</h5>\n//                     <p className=\"card-text\">The Price per hour to book this consultant is: {props.Price}</p>\n//                 </div>\n//                 <div className=\"card-body\">\n//                     <button type=\"submit\" className=\"btn btn-success\" onClick={(e) => props.handleScheduleClick(e)}>Book/Schedule</button>\n//                     <button type=\"submit\" className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModal\" onClick={handleOfferClick}>Make Offer</button>\n//                     {/* <a href=\"#\" className=\"card-link\">Book/Schedule</a> */}\n//                     {/* <a href=\"#\" className=\"card-link\">Make Offer</a> */}\n//                 </div>\n\n//                 <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n//                     <div className=\"modal-dialog\" role=\"document\">\n//                         <div className=\"modal-content\">\n//                             <div className=\"modal-header\">\n//                                 <h5 className=\"modal-title\" id=\"exampleModalLabel\">New message</h5>\n//                                 <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n//                                     <span aria-hidden=\"true\">&times;</span>\n//                                 </button>\n//                             </div>\n//                             <div className=\"modal-body\">\n//                                 <form>\n//                                     <div className=\"form-group\">\n//                                         <label htmlFor=\"recipient-name\" className=\"col-form-label\">Recipient:</label>\n//                                         <input type=\"text\" className=\"form-control\" id=\"recipient-name\"></input>\n//                                     </div>\n//                                     <div className=\"form-group\">\n//                                         <label htmlFor=\"message-text\" className=\"col-form-label\">Message:</label>\n//                                         <textarea className=\"form-control\" id=\"message-text\"></textarea>\n//                                     </div>\n//                                 </form>\n//                             </div>\n//                             <div className=\"modal-footer\">\n//                                 <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n//                                 <button type=\"button\" className=\"btn btn-primary\">Send message</button>\n//                             </div>\n//                         </div>\n//                     </div>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n\n\n\n\n\n// function Contractor(props) {\n//     function handleOfferClick(e) {\n//         e.preventDefault();\n//         $('#exampleModal').on('show.bs.modal', function (event) {\n//             var button = $(event.relatedTarget) // Button that triggered the modal\n//             var recipient = button.data('whatever') // Extract info from data-* attributes\n//             // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).\n//             // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.\n//             var modal = $(this)\n//             modal.find('.modal-title').text('New message to ' + recipient)\n//             modal.find('.modal-body input').val(recipient)\n//         })\n//     }\n//     return (\n//         <div>\n//             <div className=\"card\">\n//                 <img src={props.image} className=\"card-img-top\" alt={props.Name}></img>\n//                 <div className=\"card-body\">\n//                     <h5 className=\"card-title\">{props.Occupation}</h5>\n//                     <p className=\"card-text\">The Price per hour to book this consultant is: {props.Price}</p>\n//                 </div>\n//                 <div className=\"card-body\">\n//                     <button type=\"submit\" className=\"btn btn-success\" onClick={(e) => props.handleScheduleClick(e)}>Book/Schedule</button>\n//                     <button type=\"submit\" className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModal\" onClick={handleOfferClick}>Make Offer</button>\n//                     {/* <a href=\"#\" className=\"card-link\">Book/Schedule</a> */}\n//                     {/* <a href=\"#\" className=\"card-link\">Make Offer</a> */}\n//                 </div>\n\n//                 <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n//                     <div className=\"modal-dialog\" role=\"document\">\n//                         <div className=\"modal-content\">\n//                             <div className=\"modal-header\">\n//                                 <h5 className=\"modal-title\" id=\"exampleModalLabel\">New message</h5>\n//                                 <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n//                                     <span aria-hidden=\"true\">&times;</span>\n//                                 </button>\n//                             </div>\n//                             <div className=\"modal-body\">\n//                                 <form>\n//                                     <div className=\"form-group\">\n//                                         <label htmlFor=\"recipient-name\" className=\"col-form-label\">Recipient:</label>\n//                                         <input type=\"text\" className=\"form-control\" id=\"recipient-name\"></input>\n//                                     </div>\n//                                     <div className=\"form-group\">\n//                                         <label htmlFor=\"message-text\" className=\"col-form-label\">Message:</label>\n//                                         <textarea className=\"form-control\" id=\"message-text\"></textarea>\n//                                     </div>\n//                                 </form>\n//                             </div>\n//                             <div className=\"modal-footer\">\n//                                 <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n//                                 <button type=\"button\" className=\"btn btn-primary\">Send message</button>\n//                             </div>\n//                         </div>\n//                     </div>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n\nexport default Contractor;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport AppNavbar from './components/AppNavbar';\nimport Login from './components/Login';\nimport Payment from './components/Payment';\nimport Profile from './components/Profile';\n// import Search from './pages/Search'\nimport Contractor from './components/Contractor';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Router>\n          <AppNavbar />\n          <Switch>\n            <Route exact path='/' component={Login} />\n            <Route exact path='/profile' component={Profile} />\n            <Route exact path='/payment' component={Payment} />\n            <Route exact path='/contractor' component={Contractor}/>\n          </Switch>\n        </Router>\n      </div>\n\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport  'bootstrap/dist/css/bootstrap.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}